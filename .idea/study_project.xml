<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="The times of sitting down with a coffee and reading a newspaper seem to have passed. Now everyone gets news from their laptops or phones, so online news websites are very popular. These sites specialize on the collecting and sharing general news or materials on some specific topic. Some are independent projects, and others, like The New York Times, expanded from what wasn't initially made for the online world. What they all have in common is their basic structure. In this project, you will create a web application for online news with the help of Django.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/102&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="name" value="HyperNews Portal" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="561" />
                <option name="stepId" value="9411" />
                <option name="title" value="Main page header" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="562" />
                <option name="stepId" value="9412" />
                <option name="title" value="The news page" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="563" />
                <option name="stepId" value="9413" />
                <option name="title" value="Main page" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="564" />
                <option name="stepId" value="9414" />
                <option name="title" value="Creating new news" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="565" />
                <option name="stepId" value="9415" />
                <option name="title" value="Search news" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="157" />
                      <option name="theoryId" value="3611" />
                      <option name="title" value="The concept of patterns" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="493" />
                      <option name="theoryId" value="6701" />
                      <option name="title" value="Frameworks" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="485" />
                      <option name="theoryId" value="6633" />
                      <option name="title" value="World Wide Web" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="479" />
                      <option name="theoryId" value="6569" />
                      <option name="title" value="HyperText Transfer Protocol" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="494" />
                      <option name="theoryId" value="6740" />
                      <option name="title" value="HTTP URL" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="495" />
                      <option name="theoryId" value="6752" />
                      <option name="title" value="HTTP messages" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="577" />
                      <option name="theoryId" value="7580" />
                      <option name="title" value="Regexps basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="708" />
                      <option name="theoryId" value="8739" />
                      <option name="title" value="Computer programming" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="709" />
                      <option name="theoryId" value="8742" />
                      <option name="title" value="Intro to computational thinking" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="711" />
                      <option name="theoryId" value="8745" />
                      <option name="title" value="Components of computational thinking" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="333" />
                      <option name="theoryId" value="5204" />
                      <option name="title" value="Introduction to Python" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="336" />
                      <option name="theoryId" value="5208" />
                      <option name="title" value="Overview of the basic program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="335" />
                      <option name="theoryId" value="5233" />
                      <option name="title" value="Multi-line programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="418" />
                      <option name="theoryId" value="6047" />
                      <option name="title" value="Program execution" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="402" />
                      <option name="theoryId" value="5879" />
                      <option name="title" value="PEP 8" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="403" />
                      <option name="theoryId" value="6081" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="394" />
                      <option name="theoryId" value="5852" />
                      <option name="title" value="Basic data types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="393" />
                      <option name="theoryId" value="5814" />
                      <option name="title" value="Quotes and multi-line strings" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="512" />
                      <option name="theoryId" value="6989" />
                      <option name="title" value="Files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="348" />
                      <option name="theoryId" value="5504" />
                      <option name="title" value="Bugs and debugging" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="503" />
                      <option name="theoryId" value="6854" />
                      <option name="title" value="JSON" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="740" />
                      <option name="theoryId" value="8956" />
                      <option name="title" value="Design principles" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="633" />
                      <option name="theoryId" value="8133" />
                      <option name="title" value="Introduction to Python shell" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="646" />
                      <option name="theoryId" value="8238" />
                      <option name="title" value="Experiments with Python shell" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="547" />
                      <option name="theoryId" value="7324" />
                      <option name="title" value="Datetime module" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="647" />
                      <option name="theoryId" value="8244" />
                      <option name="title" value="Debugging in shell" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="701" />
                      <option name="theoryId" value="8691" />
                      <option name="title" value="Files in Python" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="632" />
                      <option name="theoryId" value="8139" />
                      <option name="title" value="Reading files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="659" />
                      <option name="theoryId" value="8334" />
                      <option name="title" value="Writing files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="702" />
                      <option name="theoryId" value="8702" />
                      <option name="title" value="Context manager" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="745" />
                      <option name="theoryId" value="8999" />
                      <option name="title" value="Json module" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="467" />
                      <option name="theoryId" value="6391" />
                      <option name="title" value="Django template language" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="905" />
                      <option name="theoryId" value="10006" />
                      <option name="title" value="Template filters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="471" />
                      <option name="theoryId" value="6434" />
                      <option name="title" value="HTML basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="550" />
                      <option name="theoryId" value="7536" />
                      <option name="title" value="Tags and attributes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="476" />
                      <option name="theoryId" value="6491" />
                      <option name="title" value="HTML page structure" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="556" />
                      <option name="theoryId" value="7518" />
                      <option name="title" value="Inline Elements" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="435" />
                      <option name="theoryId" value="6189" />
                      <option name="title" value="Indexes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="534" />
                      <option name="theoryId" value="7248" />
                      <option name="title" value="Arguments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="416" />
                      <option name="theoryId" value="6031" />
                      <option name="title" value="Operations with list" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="904" />
                      <option name="theoryId" value="9998" />
                      <option name="title" value="Template tags" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="506" />
                      <option name="theoryId" value="6911" />
                      <option name="title" value="Domains" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="448" />
                      <option name="theoryId" value="6263" />
                      <option name="title" value="Random module" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="544" />
                      <option name="theoryId" value="7332" />
                      <option name="title" value="Submitting data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="539" />
                      <option name="theoryId" value="7271" />
                      <option name="title" value="Block-level elements" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="552" />
                      <option name="theoryId" value="7527" />
                      <option name="title" value="HTML attributes id and class" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="478" />
                      <option name="theoryId" value="6560" />
                      <option name="title" value="HTML forms" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="599" />
                      <option name="theoryId" value="7834" />
                      <option name="title" value="REST" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="913" />
                      <option name="theoryId" value="10052" />
                      <option name="title" value="Static content" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="554" />
                      <option name="theoryId" value="7502" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="587" />
                      <option name="theoryId" value="7678" />
                      <option name="title" value="What is CSS" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="551" />
                      <option name="theoryId" value="7418" />
                      <option name="title" value="Connecting CSS to HTML" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="592" />
                      <option name="theoryId" value="7722" />
                      <option name="title" value="Basic syntax" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="The times of sitting down with a coffee and reading a newspaper seem to have passed. Now everyone gets news from their laptops or phones, so online news websites are very popular. These sites specialize on the collecting and sharing general news or materials on some specific topic. Some are independent projects, and others, like The New York Times, expanded from what wasn't initially made for the online world. What they all have in common is their basic structure. In this project, you will create a web application for online news with the help of Django." />
              <option name="id" value="102" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/339506/additional_files.json" />
              <option name="language" value="python" />
              <option name="templateBased" value="false" />
              <option name="title" value="HyperNews Portal" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="4" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="HyperNews Portal" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h2&gt;&#10;&#10;&lt;p&gt;You're working on a college newspaper called Hypernews. You are comfortable in the digital world, so you came up with the idea of broadcasting the news online and decided to create a website for this. Creating the Hypernews site will be a long road, so let's take our first step forward and make the first page. For now, you won't have actual news on the site, so until that happens you can respond to the users with the &quot;Coming soon&quot; message.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Objectives&lt;/strong&gt;&lt;/h2&gt;&#10;&#10;&lt;p&gt;Create the first handler for your server.&lt;/p&gt;&#10;&#10;&lt;p&gt;If you start the project on your computer with &lt;code class=&quot;java&quot;&gt;python manage.py runserver&lt;/code&gt; command, your server should respond with the text &quot;Coming soon&quot; at the address &lt;em&gt;localhost:8000&lt;/em&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/102/stages/561/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9411" />
                      <option name="index" value="1" />
                      <option name="name" value="Main page header" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hypernews/news/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class NewsConfig(AppConfig):&#10;    name = 'news'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/news/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/hypernews/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypernews URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypernews project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypernews project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;NEWS_JSON_PATH = 'news.json'  # You can choose any path you want&#10;NEWS_JSON_PATH = os.environ.get('NEWS_JSON_PATH') or NEWS_JSON_PATH  # DO NOT MODIFY THIS LINE&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '(-q5783z2mh-cd217skey@(+_np2&amp;j0=sl6suvo)ah2uwz@9ij'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypernews.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypernews.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.path.exists(EMPTY_DATABASE):&#10;            shutil.copyfile(EMPTY_DATABASE, TEST_DATABASE)&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;from hstest.test_case import TestCase&#10;&#10;from base import HyperNewsTest&#10;&#10;&#10;class HyperNewsTestRunner(HyperNewsTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_coming_soon_page),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HyperNewsTestRunner('hypernews.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;import copy&#10;import http.cookiejar&#10;import json&#10;import os&#10;import re&#10;import urllib&#10;from datetime import datetime&#10;&#10;from hstest.django_test import DjangoTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class HyperNewsTest(DjangoTest):&#10;    COMMON_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;'''&#10;    CSRF_PATTERN = b'&lt;input[^&gt;]+name=&quot;csrfmiddlewaretoken&quot; ' \&#10;                   b'value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;'&#10;    GROUPS_FIRST_PATTERN = '&lt;h4&gt;.*?&lt;/h4&gt;.*?&lt;ul&gt;.+?&lt;/ul&gt;'&#10;    GROUPS_SECOND_PATTERN = (&#10;        '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    )&#10;    H2_PATTERN = '&lt;h2&gt;(.+?)&lt;/h2&gt;'&#10;    H4_PATTERN = '&lt;h4&gt;(.+?)&lt;/h4&gt;'&#10;    PARAGRAPH_PATTERN = '&lt;p&gt;(.+?)&lt;/p&gt;'&#10;    TEXT_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;][a-zA-Z\d/_]+['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def __init__(self, *args, **kwargs):&#10;        current_dir = os.path.dirname(os.path.abspath(__file__))&#10;        self.news_file_name = 'news.json'&#10;        os.environ['NEWS_JSON_PATH'] = os.path.join(current_dir,&#10;                                                    self.news_file_name)&#10;        super().__init__(*args, **kwargs)&#10;&#10;    def __stripped_list(self, list):&#10;        return [item.strip() for item in list]&#10;&#10;    def __setup(self):&#10;        self.news_data = [{&#10;            'created': '2020-02-09 14:15:10',&#10;            'text': 'Text of the news 1',&#10;            'title': 'News 1',&#10;            'link': 1&#10;        }, {&#10;            'created': '2020-02-10 14:15:10',&#10;            'text': 'Text of the news 2',&#10;            'title': 'News 2',&#10;            'link': 2&#10;        }, {&#10;            'created': '2020-02-09 16:15:10',&#10;            'text': 'Text of the news 3',&#10;            'title': 'News 3',&#10;            'link': 3&#10;        }]&#10;        with open(self.news_file_name, 'w') as f:&#10;            json.dump(self.news_data, f)&#10;&#10;    def check_coming_soon_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        coming_soon_text = 'Coming soon'&#10;&#10;        # response.url for the backward compatibility&#10;        if (coming_soon_text not in page&#10;                and response.url != f'http://localhost:{self.port}/news/'):&#10;            return CheckResult.false(&#10;                '&quot;Coming soon&quot; page should contain &quot;Coming soon&quot; text'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_coming_soon_page_redirect(self) -&gt; CheckResult:&#10;        self.__setup()&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        if response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                f'&quot;Coming soon&quot; page should redirects '&#10;                f'to the http://localhost:{self.port}/news/'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_header(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h2_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        h2_headers = self.__stripped_list(h2_headers)&#10;        main_header = 'Hyper news'&#10;&#10;        if main_header not in h2_headers:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h2&gt; element with text &quot;Hyper news&quot;'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;        created = testing_news['created']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        page_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        page_headers = self.__stripped_list(page_headers)&#10;        page_paragraphs = re.findall(self.PARAGRAPH_PATTERN, page, re.S)&#10;        page_paragraphs = self.__stripped_list(page_paragraphs)&#10;        if testing_news['title'] not in page_headers:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;h2&gt; element with the data '&#10;                'of the title field from json file.'&#10;            )&#10;&#10;        if testing_news['text'] not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the text field from json file.'&#10;            )&#10;&#10;        if created not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the created field from json file '&#10;                'in the format: &quot;%Y-%m-%d %H:%M:%S&quot;.'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_create_link(self):&#10;        self.__setup()&#10;        create_link = '/news/create/'&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if create_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Main page should contain &lt;a&gt; element with href {create_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        created_set = set()&#10;        news_data = copy.deepcopy(self.news_data)&#10;        for news in news_data:&#10;            created_dt = datetime.strptime(news['created'],&#10;                                           '%Y-%m-%d %H:%M:%S') \&#10;                                 .date()&#10;            created_set.add(created_dt)&#10;&#10;        created_list = [x for x in created_set]&#10;        created_list.sort(reverse=True)&#10;        created_list_str = [x.strftime('%Y-%m-%d') for x in created_list]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;        filtered_h4 = list(filter(lambda x: x in created_list_str, h4_headers))&#10;&#10;        if filtered_h4 != created_list_str:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h4&gt; elements grouped by '&#10;                'date created and first should be fresh news.'&#10;            )&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date'] = created_date&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;            news['link'] = '/news/{}/'.format(news['link'])&#10;&#10;        file_data = sorted(news_data, key=lambda x: x['title'])&#10;        file_data = sorted(&#10;            file_data, key=lambda x: x['created_date'], reverse=True)&#10;&#10;        for news in file_data:&#10;            news.pop('created_date')&#10;            news.pop('created')&#10;            news.pop('text')&#10;&#10;        groups = re.findall(self.GROUPS_FIRST_PATTERN, page, re.S)&#10;        news_list = [&#10;            sorted(re.findall(self.GROUPS_SECOND_PATTERN, group, re.S),&#10;                   key=lambda news: news[1])&#10;            for group in groups&#10;        ]&#10;        response_data = []&#10;        for news_l, h4 in zip(news_list, filtered_h4):&#10;            for news in news_l:&#10;                response_data.append({&#10;                    'created_date_str': h4,&#10;                    'link': news[0],&#10;                    'title': news[1].strip()&#10;                })&#10;&#10;        if response_data != file_data:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;a&gt; elements with href to news pages.'&#10;            )&#10;&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_creating_news(self):&#10;        self.__setup()&#10;        old_news_titles = [news['title'] for news in self.news_data]&#10;&#10;        new_news = {&#10;            'title': 'News 4',&#10;            'text': 'Text of the news 4',&#10;        }&#10;&#10;        titles = (*old_news_titles, new_news['title'])&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            create_page_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the create page.')&#10;&#10;        create_page = create_page_response.read()&#10;&#10;        csrf_options = re.findall(self.CSRF_PATTERN, create_page)&#10;        if not csrf_options:&#10;            return CheckResult.false(&#10;                'Missing csrf_token in the create page form')&#10;&#10;        try:&#10;            create_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/',&#10;                data=urllib.parse.urlencode({&#10;                        'title': new_news['title'],&#10;                    'text': new_news['text'],&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(&#10;                    f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        if create_response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                'After creating news handler should redirects to the /news/ '&#10;                'page')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        for title in titles:&#10;            if title not in links_from_page:&#10;                return CheckResult.false(&#10;                    f'After creating news main page can\'t find {title}')&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_create_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        try:&#10;            page = self.read_page(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the create page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Create page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'News page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_search(self):&#10;        self.__setup()&#10;        q = '2'&#10;        news_data = copy.deepcopy(self.news_data)&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;&#10;        all_headers = set((x['created_date_str'] for x in news_data))&#10;        visible_headers = set((x['created_date_str'] for x in news_data&#10;                               if q in x['title']))&#10;        invisible_headers = all_headers - visible_headers&#10;        visible_titles = [x['title'] for x in news_data&#10;                          if q in x['title']]&#10;        invisible_titles = [x['title'] for x in news_data&#10;                            if q not in x['title']]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/?q={q}')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the search page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;&#10;        for header in visible_headers:&#10;            if header not in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should contain headers with found news'&#10;                )&#10;&#10;        for header in invisible_headers:&#10;            if header in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should not contain headers with unfound news'&#10;                )&#10;&#10;        titles = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        titles = self.__stripped_list(titles)&#10;&#10;        for title in visible_titles:&#10;            if title not in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain unfound news'&#10;                )&#10;&#10;        for title in invisible_titles:&#10;            if title in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain found news'&#10;                )&#10;&#10;        return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="news.json">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="news.json" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/db.sqlite3">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/db.sqlite3" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Exciting: you got the first news material for your e-paper, and that news is just extraterrestrial! Now you are going to proudly show it on the site. For that purpose, you'll need to add a page to display news.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;You will store data in the JSON file; the path to this file is saved in the &lt;code class=&quot;language-json&quot;&gt;NEWS_JSON_PATH&lt;/code&gt; variable in the project settings. &lt;/p&gt;&#10;&#10;&lt;p&gt;Your JSON file should contain an array of objects with obligatory &lt;code class=&quot;language-json&quot;&gt;created&lt;/code&gt;, &lt;code class=&quot;language-json&quot;&gt;text&lt;/code&gt;, &lt;code class=&quot;language-json&quot;&gt;title&lt;/code&gt;, and &lt;code class=&quot;language-json&quot;&gt;link&lt;/code&gt; fields:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;[&#10;  {&#10;    &quot;created&quot;: &quot;2020-02-22 16:40:00&quot;,&#10;    &quot;text&quot;: &quot;A new star appeared in the sky.&quot;,&#10;    &quot;title&quot;: &quot;The birth of the star&quot;,&#10;    &quot;link&quot;: 9234732&#10;  },&#10;  ...&#10;]&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;The field &lt;code class=&quot;language-json&quot;&gt;created&lt;/code&gt; should have the format &lt;a target=&quot;_blank&quot; href=&quot;https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;em&gt;&quot;%Y-%m-%d %H:%M:%S&quot;&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Each news page has a unique link. In our case, the &lt;code class=&quot;language-json&quot;&gt;link&lt;/code&gt; identifier should be a number. You can pick any number you want, just make sure that it is unique for every news material.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Example&lt;/h2&gt;&#10;&#10;&lt;p&gt;If you start the application on your computer with the &lt;code class=&quot;language-json&quot;&gt;python manage.py runserver&lt;/code&gt; command, the page on the &lt;em&gt;localhost:8000/news/9234732/&lt;/em&gt; should display news as:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h2&amp;gt;The birth of a star&amp;lt;/h2&amp;gt;&#10;&amp;lt;p&amp;gt;2020-02-22 16:40:00&amp;lt;/p&amp;gt;&#10;&amp;lt;p&amp;gt;A new star appeared in the sky.&amp;lt;/p&amp;gt;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Add a link to the future main page with &lt;code class=&quot;language-json&quot;&gt;target=&quot;_blank&quot; href=&quot;/news/&quot;&lt;/code&gt; below.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/102/stages/562/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9412" />
                      <option name="index" value="2" />
                      <option name="name" value="The news page" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hypernews/news/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class NewsConfig(AppConfig):&#10;    name = 'news'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/news/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/hypernews/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypernews URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypernews project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/hypernews/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypernews project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;NEWS_JSON_PATH = 'news.json'  # You can choose any path you want&#10;NEWS_JSON_PATH = os.environ.get('NEWS_JSON_PATH') or NEWS_JSON_PATH  # DO NOT MODIFY THIS LINE&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '(-q5783z2mh-cd217skey@(+_np2&amp;j0=sl6suvo)ah2uwz@9ij'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypernews.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypernews.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;import copy&#10;import http.cookiejar&#10;import json&#10;import os&#10;import re&#10;import urllib&#10;from datetime import datetime&#10;&#10;from hstest.django_test import DjangoTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class HyperNewsTest(DjangoTest):&#10;    COMMON_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;'''&#10;    CSRF_PATTERN = b'&lt;input[^&gt;]+name=&quot;csrfmiddlewaretoken&quot; ' \&#10;                   b'value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;'&#10;    GROUPS_FIRST_PATTERN = '&lt;h4&gt;.*?&lt;/h4&gt;.*?&lt;ul&gt;.+?&lt;/ul&gt;'&#10;    GROUPS_SECOND_PATTERN = (&#10;        '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    )&#10;    H2_PATTERN = '&lt;h2&gt;(.+?)&lt;/h2&gt;'&#10;    H4_PATTERN = '&lt;h4&gt;(.+?)&lt;/h4&gt;'&#10;    PARAGRAPH_PATTERN = '&lt;p&gt;(.+?)&lt;/p&gt;'&#10;    TEXT_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;][a-zA-Z\d/_]+['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def __init__(self, *args, **kwargs):&#10;        current_dir = os.path.dirname(os.path.abspath(__file__))&#10;        self.news_file_name = 'news.json'&#10;        os.environ['NEWS_JSON_PATH'] = os.path.join(current_dir,&#10;                                                    self.news_file_name)&#10;        super().__init__(*args, **kwargs)&#10;&#10;    def __stripped_list(self, list):&#10;        return [item.strip() for item in list]&#10;&#10;    def __setup(self):&#10;        self.news_data = [{&#10;            'created': '2020-02-09 14:15:10',&#10;            'text': 'Text of the news 1',&#10;            'title': 'News 1',&#10;            'link': 1&#10;        }, {&#10;            'created': '2020-02-10 14:15:10',&#10;            'text': 'Text of the news 2',&#10;            'title': 'News 2',&#10;            'link': 2&#10;        }, {&#10;            'created': '2020-02-09 16:15:10',&#10;            'text': 'Text of the news 3',&#10;            'title': 'News 3',&#10;            'link': 3&#10;        }]&#10;        with open(self.news_file_name, 'w') as f:&#10;            json.dump(self.news_data, f)&#10;&#10;    def check_coming_soon_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        coming_soon_text = 'Coming soon'&#10;&#10;        # response.url for the backward compatibility&#10;        if (coming_soon_text not in page&#10;                and response.url != f'http://localhost:{self.port}/news/'):&#10;            return CheckResult.false(&#10;                '&quot;Coming soon&quot; page should contain &quot;Coming soon&quot; text'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_coming_soon_page_redirect(self) -&gt; CheckResult:&#10;        self.__setup()&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        if response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                f'&quot;Coming soon&quot; page should redirects '&#10;                f'to the http://localhost:{self.port}/news/'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_header(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h2_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        h2_headers = self.__stripped_list(h2_headers)&#10;        main_header = 'Hyper news'&#10;&#10;        if main_header not in h2_headers:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h2&gt; element with text &quot;Hyper news&quot;'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;        created = testing_news['created']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        page_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        page_headers = self.__stripped_list(page_headers)&#10;        page_paragraphs = re.findall(self.PARAGRAPH_PATTERN, page, re.S)&#10;        page_paragraphs = self.__stripped_list(page_paragraphs)&#10;        if testing_news['title'] not in page_headers:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;h2&gt; element with the data '&#10;                'of the title field from json file.'&#10;            )&#10;&#10;        if testing_news['text'] not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the text field from json file.'&#10;            )&#10;&#10;        if created not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the created field from json file '&#10;                'in the format: &quot;%Y-%m-%d %H:%M:%S&quot;.'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_create_link(self):&#10;        self.__setup()&#10;        create_link = '/news/create/'&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if create_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Main page should contain &lt;a&gt; element with href {create_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        created_set = set()&#10;        news_data = copy.deepcopy(self.news_data)&#10;        for news in news_data:&#10;            created_dt = datetime.strptime(news['created'],&#10;                                           '%Y-%m-%d %H:%M:%S') \&#10;                                 .date()&#10;            created_set.add(created_dt)&#10;&#10;        created_list = [x for x in created_set]&#10;        created_list.sort(reverse=True)&#10;        created_list_str = [x.strftime('%Y-%m-%d') for x in created_list]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;        filtered_h4 = list(filter(lambda x: x in created_list_str, h4_headers))&#10;&#10;        if filtered_h4 != created_list_str:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h4&gt; elements grouped by '&#10;                'date created and first should be fresh news.'&#10;            )&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date'] = created_date&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;            news['link'] = '/news/{}/'.format(news['link'])&#10;&#10;        file_data = sorted(news_data, key=lambda x: x['title'])&#10;        file_data = sorted(&#10;            file_data, key=lambda x: x['created_date'], reverse=True)&#10;&#10;        for news in file_data:&#10;            news.pop('created_date')&#10;            news.pop('created')&#10;            news.pop('text')&#10;&#10;        groups = re.findall(self.GROUPS_FIRST_PATTERN, page, re.S)&#10;        news_list = [&#10;            sorted(re.findall(self.GROUPS_SECOND_PATTERN, group, re.S),&#10;                   key=lambda news: news[1])&#10;            for group in groups&#10;        ]&#10;        response_data = []&#10;        for news_l, h4 in zip(news_list, filtered_h4):&#10;            for news in news_l:&#10;                response_data.append({&#10;                    'created_date_str': h4,&#10;                    'link': news[0],&#10;                    'title': news[1].strip()&#10;                })&#10;&#10;        if response_data != file_data:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;a&gt; elements with href to news pages.'&#10;            )&#10;&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_creating_news(self):&#10;        self.__setup()&#10;        old_news_titles = [news['title'] for news in self.news_data]&#10;&#10;        new_news = {&#10;            'title': 'News 4',&#10;            'text': 'Text of the news 4',&#10;        }&#10;&#10;        titles = (*old_news_titles, new_news['title'])&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            create_page_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the create page.')&#10;&#10;        create_page = create_page_response.read()&#10;&#10;        csrf_options = re.findall(self.CSRF_PATTERN, create_page)&#10;        if not csrf_options:&#10;            return CheckResult.false(&#10;                'Missing csrf_token in the create page form')&#10;&#10;        try:&#10;            create_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/',&#10;                data=urllib.parse.urlencode({&#10;                        'title': new_news['title'],&#10;                    'text': new_news['text'],&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(&#10;                    f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        if create_response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                'After creating news handler should redirects to the /news/ '&#10;                'page')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        for title in titles:&#10;            if title not in links_from_page:&#10;                return CheckResult.false(&#10;                    f'After creating news main page can\'t find {title}')&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_create_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        try:&#10;            page = self.read_page(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the create page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Create page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'News page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_search(self):&#10;        self.__setup()&#10;        q = '2'&#10;        news_data = copy.deepcopy(self.news_data)&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;&#10;        all_headers = set((x['created_date_str'] for x in news_data))&#10;        visible_headers = set((x['created_date_str'] for x in news_data&#10;                               if q in x['title']))&#10;        invisible_headers = all_headers - visible_headers&#10;        visible_titles = [x['title'] for x in news_data&#10;                          if q in x['title']]&#10;        invisible_titles = [x['title'] for x in news_data&#10;                            if q not in x['title']]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/?q={q}')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the search page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;&#10;        for header in visible_headers:&#10;            if header not in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should contain headers with found news'&#10;                )&#10;&#10;        for header in invisible_headers:&#10;            if header in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should not contain headers with unfound news'&#10;                )&#10;&#10;        titles = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        titles = self.__stripped_list(titles)&#10;&#10;        for title in visible_titles:&#10;            if title not in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain unfound news'&#10;                )&#10;&#10;        for title in invisible_titles:&#10;            if title in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain found news'&#10;                )&#10;&#10;        return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.path.exists(EMPTY_DATABASE):&#10;            shutil.copyfile(EMPTY_DATABASE, TEST_DATABASE)&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;from hstest.test_case import TestCase&#10;&#10;from base import HyperNewsTest&#10;&#10;&#10;class HyperNewsTestRunner(HyperNewsTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_coming_soon_page),&#10;            # 2 task&#10;            TestCase(attach=self.check_news_page),&#10;            TestCase(attach=self.check_news_page_main_link),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HyperNewsTestRunner('hypernews.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="news.json">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="news.json" />
                                <option name="text" value="[{&quot;created&quot;: &quot;2020-02-09 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 1&quot;, &quot;title&quot;: &quot;News 1&quot;, &quot;link&quot;: 1}, {&quot;created&quot;: &quot;2020-02-10 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 2&quot;, &quot;title&quot;: &quot;News 2&quot;, &quot;link&quot;: 2}, {&quot;created&quot;: &quot;2020-02-09 16:15:10&quot;, &quot;text&quot;: &quot;Text of the news 3&quot;, &quot;title&quot;: &quot;News 3&quot;, &quot;link&quot;: 3}]" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/templates/news/news.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/news/templates/news/news.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;For now, the visitors can access news only via direct links with the identifiers known only by you. Let's collect the news on one page to show them all to our users. There will be catchy titles, of course: we have to make sure our readers will want to open the full text!&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;At the top of your main page there&lt;em&gt; &lt;/em&gt;should be a page header:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h2&amp;gt;Hyper news&amp;lt;/h2&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Below, you need to add some information about your news: the publication date, the title, and the link to its page.&lt;br&gt;&#10;    Group them by date into unordered lists:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h4&amp;gt;2020-02-02&amp;lt;/h4&amp;gt;&#10;&#10;&amp;lt;ul&amp;gt;&#10;  &amp;lt;li&amp;gt;&amp;lt;a target=&quot;_blank&quot; href=&quot;/news/9234732/&quot;&amp;gt;The birth of the star&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;  &amp;lt;li&amp;gt;&amp;lt;a target=&quot;_blank&quot; href=&quot;/news/2389742/&quot;&amp;gt;The raise of Jupyter&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#10;&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;The most recent news should be at the top.&lt;/p&gt;&#10;&#10;&lt;p&gt;If you start the application on your computer with the &lt;code class=&quot;language-html&quot;&gt;python manage.py runserver&lt;/code&gt; command, the main page will be available at the &lt;em&gt;localhost:8000/news/&lt;/em&gt; address&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Add the link to create a future page with &lt;code class=&quot;language-html&quot;&gt;target=&quot;_blank&quot; href=&quot;/news/create/&quot;&lt;/code&gt; below.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/102/stages/563/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9413" />
                      <option name="index" value="3" />
                      <option name="name" value="Main page" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hypernews/news/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class NewsConfig(AppConfig):&#10;    name = 'news'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/news/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/hypernews/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypernews URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypernews project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/hypernews/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypernews project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;NEWS_JSON_PATH = 'news.json'  # You can choose any path you want&#10;NEWS_JSON_PATH = os.environ.get('NEWS_JSON_PATH') or NEWS_JSON_PATH  # DO NOT MODIFY THIS LINE&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '(-q5783z2mh-cd217skey@(+_np2&amp;j0=sl6suvo)ah2uwz@9ij'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypernews.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypernews.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;import copy&#10;import http.cookiejar&#10;import json&#10;import os&#10;import re&#10;import urllib&#10;from datetime import datetime&#10;&#10;from hstest.django_test import DjangoTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class HyperNewsTest(DjangoTest):&#10;    COMMON_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;'''&#10;    CSRF_PATTERN = b'&lt;input[^&gt;]+name=&quot;csrfmiddlewaretoken&quot; ' \&#10;                   b'value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;'&#10;    GROUPS_FIRST_PATTERN = '&lt;h4&gt;.*?&lt;/h4&gt;.*?&lt;ul&gt;.+?&lt;/ul&gt;'&#10;    GROUPS_SECOND_PATTERN = (&#10;        '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    )&#10;    H2_PATTERN = '&lt;h2&gt;(.+?)&lt;/h2&gt;'&#10;    H4_PATTERN = '&lt;h4&gt;(.+?)&lt;/h4&gt;'&#10;    PARAGRAPH_PATTERN = '&lt;p&gt;(.+?)&lt;/p&gt;'&#10;    TEXT_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;][a-zA-Z\d/_]+['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def __init__(self, *args, **kwargs):&#10;        current_dir = os.path.dirname(os.path.abspath(__file__))&#10;        self.news_file_name = 'news.json'&#10;        os.environ['NEWS_JSON_PATH'] = os.path.join(current_dir,&#10;                                                    self.news_file_name)&#10;        super().__init__(*args, **kwargs)&#10;&#10;    def __stripped_list(self, list):&#10;        return [item.strip() for item in list]&#10;&#10;    def __setup(self):&#10;        self.news_data = [{&#10;            'created': '2020-02-09 14:15:10',&#10;            'text': 'Text of the news 1',&#10;            'title': 'News 1',&#10;            'link': 1&#10;        }, {&#10;            'created': '2020-02-10 14:15:10',&#10;            'text': 'Text of the news 2',&#10;            'title': 'News 2',&#10;            'link': 2&#10;        }, {&#10;            'created': '2020-02-09 16:15:10',&#10;            'text': 'Text of the news 3',&#10;            'title': 'News 3',&#10;            'link': 3&#10;        }]&#10;        with open(self.news_file_name, 'w') as f:&#10;            json.dump(self.news_data, f)&#10;&#10;    def check_coming_soon_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        coming_soon_text = 'Coming soon'&#10;&#10;        # response.url for the backward compatibility&#10;        if (coming_soon_text not in page&#10;                and response.url != f'http://localhost:{self.port}/news/'):&#10;            return CheckResult.false(&#10;                '&quot;Coming soon&quot; page should contain &quot;Coming soon&quot; text'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_coming_soon_page_redirect(self) -&gt; CheckResult:&#10;        self.__setup()&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        if response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                f'&quot;Coming soon&quot; page should redirects '&#10;                f'to the http://localhost:{self.port}/news/'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_header(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h2_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        h2_headers = self.__stripped_list(h2_headers)&#10;        main_header = 'Hyper news'&#10;&#10;        if main_header not in h2_headers:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h2&gt; element with text &quot;Hyper news&quot;'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;        created = testing_news['created']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        page_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        page_headers = self.__stripped_list(page_headers)&#10;        page_paragraphs = re.findall(self.PARAGRAPH_PATTERN, page, re.S)&#10;        page_paragraphs = self.__stripped_list(page_paragraphs)&#10;        if testing_news['title'] not in page_headers:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;h2&gt; element with the data '&#10;                'of the title field from json file.'&#10;            )&#10;&#10;        if testing_news['text'] not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the text field from json file.'&#10;            )&#10;&#10;        if created not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the created field from json file '&#10;                'in the format: &quot;%Y-%m-%d %H:%M:%S&quot;.'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_create_link(self):&#10;        self.__setup()&#10;        create_link = '/news/create/'&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if create_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Main page should contain &lt;a&gt; element with href {create_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        created_set = set()&#10;        news_data = copy.deepcopy(self.news_data)&#10;        for news in news_data:&#10;            created_dt = datetime.strptime(news['created'],&#10;                                           '%Y-%m-%d %H:%M:%S') \&#10;                                 .date()&#10;            created_set.add(created_dt)&#10;&#10;        created_list = [x for x in created_set]&#10;        created_list.sort(reverse=True)&#10;        created_list_str = [x.strftime('%Y-%m-%d') for x in created_list]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;        filtered_h4 = list(filter(lambda x: x in created_list_str, h4_headers))&#10;&#10;        if filtered_h4 != created_list_str:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h4&gt; elements grouped by '&#10;                'date created and first should be fresh news.'&#10;            )&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date'] = created_date&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;            news['link'] = '/news/{}/'.format(news['link'])&#10;&#10;        file_data = sorted(news_data, key=lambda x: x['title'])&#10;        file_data = sorted(&#10;            file_data, key=lambda x: x['created_date'], reverse=True)&#10;&#10;        for news in file_data:&#10;            news.pop('created_date')&#10;            news.pop('created')&#10;            news.pop('text')&#10;&#10;        groups = re.findall(self.GROUPS_FIRST_PATTERN, page, re.S)&#10;        news_list = [&#10;            sorted(re.findall(self.GROUPS_SECOND_PATTERN, group, re.S),&#10;                   key=lambda news: news[1])&#10;            for group in groups&#10;        ]&#10;        response_data = []&#10;        for news_l, h4 in zip(news_list, filtered_h4):&#10;            for news in news_l:&#10;                response_data.append({&#10;                    'created_date_str': h4,&#10;                    'link': news[0],&#10;                    'title': news[1].strip()&#10;                })&#10;&#10;        if response_data != file_data:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;a&gt; elements with href to news pages.'&#10;            )&#10;&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_creating_news(self):&#10;        self.__setup()&#10;        old_news_titles = [news['title'] for news in self.news_data]&#10;&#10;        new_news = {&#10;            'title': 'News 4',&#10;            'text': 'Text of the news 4',&#10;        }&#10;&#10;        titles = (*old_news_titles, new_news['title'])&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            create_page_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the create page.')&#10;&#10;        create_page = create_page_response.read()&#10;&#10;        csrf_options = re.findall(self.CSRF_PATTERN, create_page)&#10;        if not csrf_options:&#10;            return CheckResult.false(&#10;                'Missing csrf_token in the create page form')&#10;&#10;        try:&#10;            create_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/',&#10;                data=urllib.parse.urlencode({&#10;                        'title': new_news['title'],&#10;                    'text': new_news['text'],&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(&#10;                    f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        if create_response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                'After creating news handler should redirects to the /news/ '&#10;                'page')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        for title in titles:&#10;            if title not in links_from_page:&#10;                return CheckResult.false(&#10;                    f'After creating news main page can\'t find {title}')&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_create_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        try:&#10;            page = self.read_page(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the create page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Create page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'News page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_search(self):&#10;        self.__setup()&#10;        q = '2'&#10;        news_data = copy.deepcopy(self.news_data)&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;&#10;        all_headers = set((x['created_date_str'] for x in news_data))&#10;        visible_headers = set((x['created_date_str'] for x in news_data&#10;                               if q in x['title']))&#10;        invisible_headers = all_headers - visible_headers&#10;        visible_titles = [x['title'] for x in news_data&#10;                          if q in x['title']]&#10;        invisible_titles = [x['title'] for x in news_data&#10;                            if q not in x['title']]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/?q={q}')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the search page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;&#10;        for header in visible_headers:&#10;            if header not in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should contain headers with found news'&#10;                )&#10;&#10;        for header in invisible_headers:&#10;            if header in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should not contain headers with unfound news'&#10;                )&#10;&#10;        titles = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        titles = self.__stripped_list(titles)&#10;&#10;        for title in visible_titles:&#10;            if title not in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain unfound news'&#10;                )&#10;&#10;        for title in invisible_titles:&#10;            if title in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain found news'&#10;                )&#10;&#10;        return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.path.exists(EMPTY_DATABASE):&#10;            shutil.copyfile(EMPTY_DATABASE, TEST_DATABASE)&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;from hstest.test_case import TestCase&#10;&#10;from base import HyperNewsTest&#10;&#10;&#10;class HyperNewsTestRunner(HyperNewsTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_coming_soon_page),&#10;            # 2 task&#10;            TestCase(attach=self.check_news_page),&#10;            TestCase(attach=self.check_news_page_main_link),&#10;            # 3 task&#10;            TestCase(attach=self.check_main_header),&#10;            TestCase(attach=self.check_main_page),&#10;            TestCase(attach=self.check_main_page_create_link),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HyperNewsTestRunner('hypernews.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/templates/news/news.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/templates/news/news.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;News&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h2&gt;{{ title }}&lt;/h2&gt;&#10;    &lt;p&gt;{{ created }}&lt;/p&gt;&#10;    &lt;p&gt;{{ text }}&lt;/p&gt;&#10;    &lt;a target=&quot;_blank&quot; href=&quot;/news/&quot;&gt;news&lt;/a&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="news.json">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="news.json" />
                                <option name="text" value="[{&quot;created&quot;: &quot;2020-02-09 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 1&quot;, &quot;title&quot;: &quot;News 1&quot;, &quot;link&quot;: 1}, {&quot;created&quot;: &quot;2020-02-10 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 2&quot;, &quot;title&quot;: &quot;News 2&quot;, &quot;link&quot;: 2}, {&quot;created&quot;: &quot;2020-02-09 16:15:10&quot;, &quot;text&quot;: &quot;Text of the news 3&quot;, &quot;title&quot;: &quot;News 3&quot;, &quot;link&quot;: 3}]" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;You store your news data in the JSON file. Every time you want to add news, you have to edit this file, which is quite inconvenient. That's why you need to add the possibility to create news through your web interface.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Create a new page to add news using a form. This form should send data to the /&lt;em&gt;news/create/ &lt;/em&gt;address with the POST method to create a new record with two parameters, &lt;code class=&quot;java&quot;&gt;title&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;text&lt;/code&gt;. When the request is completed, the response should redirect you back to the main page. &lt;/p&gt;&#10;&#10;&lt;p&gt;If you start the application on your computer with the &lt;code class=&quot;java&quot;&gt;python manage.py runserver&lt;/code&gt; command, the page for creating news should be available at the &lt;em&gt;localhost:8000/news/create/&lt;/em&gt; address.&lt;/p&gt;&#10;&#10;&lt;p&gt;The page should also contain a link to the main page link with &lt;code class=&quot;java&quot;&gt;target=&quot;_blank&quot; href=&quot;/news/&quot;&lt;/code&gt;. &lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt; The &lt;code class=&quot;java&quot;&gt;link&lt;/code&gt; in your storage should be a random number, but remember that it's unique for every news. Choose the current time for the&lt;code class=&quot;java&quot;&gt;created&lt;/code&gt; field, and do not forget to convert it to a string before saving to JSON. &lt;/div&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/102/stages/564/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9414" />
                      <option name="index" value="4" />
                      <option name="name" value="Creating new news" />
                      <option name="record" value="4" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="hypernews/news/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class NewsConfig(AppConfig):&#10;    name = 'news'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/news/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/hypernews/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypernews URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypernews project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypernews project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;NEWS_JSON_PATH = 'news.json'  # You can choose any path you want&#10;NEWS_JSON_PATH = os.environ.get('NEWS_JSON_PATH') or NEWS_JSON_PATH  # DO NOT MODIFY THIS LINE&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '(-q5783z2mh-cd217skey@(+_np2&amp;j0=sl6suvo)ah2uwz@9ij'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypernews.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypernews.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;import copy&#10;import http.cookiejar&#10;import json&#10;import os&#10;import re&#10;import urllib&#10;from datetime import datetime&#10;&#10;from hstest.django_test import DjangoTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class HyperNewsTest(DjangoTest):&#10;    COMMON_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;'''&#10;    CSRF_PATTERN = b'&lt;input[^&gt;]+name=&quot;csrfmiddlewaretoken&quot; ' \&#10;                   b'value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;'&#10;    GROUPS_FIRST_PATTERN = '&lt;h4&gt;.*?&lt;/h4&gt;.*?&lt;ul&gt;.+?&lt;/ul&gt;'&#10;    GROUPS_SECOND_PATTERN = (&#10;        '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    )&#10;    H2_PATTERN = '&lt;h2&gt;(.+?)&lt;/h2&gt;'&#10;    H4_PATTERN = '&lt;h4&gt;(.+?)&lt;/h4&gt;'&#10;    PARAGRAPH_PATTERN = '&lt;p&gt;(.+?)&lt;/p&gt;'&#10;    TEXT_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;][a-zA-Z\d/_]+['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def __init__(self, *args, **kwargs):&#10;        current_dir = os.path.dirname(os.path.abspath(__file__))&#10;        self.news_file_name = 'news.json'&#10;        os.environ['NEWS_JSON_PATH'] = os.path.join(current_dir,&#10;                                                    self.news_file_name)&#10;        super().__init__(*args, **kwargs)&#10;&#10;    def __stripped_list(self, list):&#10;        return [item.strip() for item in list]&#10;&#10;    def __setup(self):&#10;        self.news_data = [{&#10;            'created': '2020-02-09 14:15:10',&#10;            'text': 'Text of the news 1',&#10;            'title': 'News 1',&#10;            'link': 1&#10;        }, {&#10;            'created': '2020-02-10 14:15:10',&#10;            'text': 'Text of the news 2',&#10;            'title': 'News 2',&#10;            'link': 2&#10;        }, {&#10;            'created': '2020-02-09 16:15:10',&#10;            'text': 'Text of the news 3',&#10;            'title': 'News 3',&#10;            'link': 3&#10;        }]&#10;        with open(self.news_file_name, 'w') as f:&#10;            json.dump(self.news_data, f)&#10;&#10;    def check_coming_soon_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        coming_soon_text = 'Coming soon'&#10;&#10;        # response.url for the backward compatibility&#10;        if (coming_soon_text not in page&#10;                and response.url != f'http://localhost:{self.port}/news/'):&#10;            return CheckResult.false(&#10;                '&quot;Coming soon&quot; page should contain &quot;Coming soon&quot; text'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_coming_soon_page_redirect(self) -&gt; CheckResult:&#10;        self.__setup()&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        if response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                f'&quot;Coming soon&quot; page should redirects '&#10;                f'to the http://localhost:{self.port}/news/'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_header(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h2_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        h2_headers = self.__stripped_list(h2_headers)&#10;        main_header = 'Hyper news'&#10;&#10;        if main_header not in h2_headers:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h2&gt; element with text &quot;Hyper news&quot;'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;        created = testing_news['created']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        page_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        page_headers = self.__stripped_list(page_headers)&#10;        page_paragraphs = re.findall(self.PARAGRAPH_PATTERN, page, re.S)&#10;        page_paragraphs = self.__stripped_list(page_paragraphs)&#10;        if testing_news['title'] not in page_headers:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;h2&gt; element with the data '&#10;                'of the title field from json file.'&#10;            )&#10;&#10;        if testing_news['text'] not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the text field from json file.'&#10;            )&#10;&#10;        if created not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the created field from json file '&#10;                'in the format: &quot;%Y-%m-%d %H:%M:%S&quot;.'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_create_link(self):&#10;        self.__setup()&#10;        create_link = '/news/create/'&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if create_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Main page should contain &lt;a&gt; element with href {create_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        created_set = set()&#10;        news_data = copy.deepcopy(self.news_data)&#10;        for news in news_data:&#10;            created_dt = datetime.strptime(news['created'],&#10;                                           '%Y-%m-%d %H:%M:%S') \&#10;                                 .date()&#10;            created_set.add(created_dt)&#10;&#10;        created_list = [x for x in created_set]&#10;        created_list.sort(reverse=True)&#10;        created_list_str = [x.strftime('%Y-%m-%d') for x in created_list]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;        filtered_h4 = list(filter(lambda x: x in created_list_str, h4_headers))&#10;&#10;        if filtered_h4 != created_list_str:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h4&gt; elements grouped by '&#10;                'date created and first should be fresh news.'&#10;            )&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date'] = created_date&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;            news['link'] = '/news/{}/'.format(news['link'])&#10;&#10;        file_data = sorted(news_data, key=lambda x: x['title'])&#10;        file_data = sorted(&#10;            file_data, key=lambda x: x['created_date'], reverse=True)&#10;&#10;        for news in file_data:&#10;            news.pop('created_date')&#10;            news.pop('created')&#10;            news.pop('text')&#10;&#10;        groups = re.findall(self.GROUPS_FIRST_PATTERN, page, re.S)&#10;        news_list = [&#10;            sorted(re.findall(self.GROUPS_SECOND_PATTERN, group, re.S),&#10;                   key=lambda news: news[1])&#10;            for group in groups&#10;        ]&#10;        response_data = []&#10;        for news_l, h4 in zip(news_list, filtered_h4):&#10;            for news in news_l:&#10;                response_data.append({&#10;                    'created_date_str': h4,&#10;                    'link': news[0],&#10;                    'title': news[1].strip()&#10;                })&#10;&#10;        if response_data != file_data:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;a&gt; elements with href to news pages.'&#10;            )&#10;&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_creating_news(self):&#10;        self.__setup()&#10;        old_news_titles = [news['title'] for news in self.news_data]&#10;&#10;        new_news = {&#10;            'title': 'News 4',&#10;            'text': 'Text of the news 4',&#10;        }&#10;&#10;        titles = (*old_news_titles, new_news['title'])&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            create_page_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the create page.')&#10;&#10;        create_page = create_page_response.read()&#10;&#10;        csrf_options = re.findall(self.CSRF_PATTERN, create_page)&#10;        if not csrf_options:&#10;            return CheckResult.false(&#10;                'Missing csrf_token in the create page form')&#10;&#10;        try:&#10;            create_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/',&#10;                data=urllib.parse.urlencode({&#10;                        'title': new_news['title'],&#10;                    'text': new_news['text'],&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(&#10;                    f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        if create_response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                'After creating news handler should redirects to the /news/ '&#10;                'page')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        for title in titles:&#10;            if title not in links_from_page:&#10;                return CheckResult.false(&#10;                    f'After creating news main page can\'t find {title}')&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_create_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        try:&#10;            page = self.read_page(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the create page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Create page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'News page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_search(self):&#10;        self.__setup()&#10;        q = '2'&#10;        news_data = copy.deepcopy(self.news_data)&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;&#10;        all_headers = set((x['created_date_str'] for x in news_data))&#10;        visible_headers = set((x['created_date_str'] for x in news_data&#10;                               if q in x['title']))&#10;        invisible_headers = all_headers - visible_headers&#10;        visible_titles = [x['title'] for x in news_data&#10;                          if q in x['title']]&#10;        invisible_titles = [x['title'] for x in news_data&#10;                            if q not in x['title']]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/?q={q}')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the search page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;&#10;        for header in visible_headers:&#10;            if header not in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should contain headers with found news'&#10;                )&#10;&#10;        for header in invisible_headers:&#10;            if header in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should not contain headers with unfound news'&#10;                )&#10;&#10;        titles = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        titles = self.__stripped_list(titles)&#10;&#10;        for title in visible_titles:&#10;            if title not in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain unfound news'&#10;                )&#10;&#10;        for title in invisible_titles:&#10;            if title in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain found news'&#10;                )&#10;&#10;        return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.path.exists(EMPTY_DATABASE):&#10;            shutil.copyfile(EMPTY_DATABASE, TEST_DATABASE)&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;from hstest.test_case import TestCase&#10;&#10;from base import HyperNewsTest&#10;&#10;&#10;class HyperNewsTestRunner(HyperNewsTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_coming_soon_page),&#10;            # 2 task&#10;            TestCase(attach=self.check_news_page),&#10;            TestCase(attach=self.check_news_page_main_link),&#10;            # 3 task&#10;            TestCase(attach=self.check_main_header),&#10;            TestCase(attach=self.check_main_page),&#10;            TestCase(attach=self.check_main_page_create_link),&#10;            # 4 task&#10;            TestCase(attach=self.check_creating_news),&#10;            TestCase(attach=self.check_create_page_main_link),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HyperNewsTestRunner('hypernews.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/templates/news/news.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/templates/news/news.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;News&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h2&gt;{{ title }}&lt;/h2&gt;&#10;    &lt;p&gt;{{ created }}&lt;/p&gt;&#10;    &lt;p&gt;{{ text }}&lt;/p&gt;&#10;    &lt;a target=&quot;_blank&quot; href=&quot;/news/&quot;&gt;news&lt;/a&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="news.json">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="news.json" />
                                <option name="text" value="[{&quot;created&quot;: &quot;2020-02-09 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 1&quot;, &quot;title&quot;: &quot;News 1&quot;, &quot;link&quot;: 1}, {&quot;created&quot;: &quot;2020-02-10 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 2&quot;, &quot;title&quot;: &quot;News 2&quot;, &quot;link&quot;: 2}, {&quot;created&quot;: &quot;2020-02-09 16:15:10&quot;, &quot;text&quot;: &quot;Text of the news 3&quot;, &quot;title&quot;: &quot;News 3&quot;, &quot;link&quot;: 3}]" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/templates/news/main_news.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/templates/news/main_news.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/templates/news/create_news.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/news/templates/news/create_news.html" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/news.json">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/news/news.json" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;You kept adding news to your site and everything was great. At some point, there was a lot of news materials on your site and it became difficult to find what you need. You decided to add a search to your site.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Objectives&lt;/h2&gt;&#10;&#10;&lt;p&gt;Add a search form to your main page with one input element with the name &lt;code class=&quot;language-django&quot;&gt;q&lt;/code&gt; . The form should send GET requests to the same &lt;em&gt;/news/&lt;/em&gt; page. The format of the result page stays the same but includes only that specific piece of news whose title contains the input data.&lt;/p&gt;&#10;&#10;&lt;p&gt;Do you remember the &quot;&lt;em&gt;Coming soon&lt;/em&gt;&quot; page? Now your site is complete and all requests to that page should be redirected to the main page at &lt;em&gt;localhost:8000/news/.&lt;/em&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Great job!&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Extra&lt;/h2&gt;&#10;&#10;&lt;p&gt;This step is &lt;strong&gt;NOT&lt;/strong&gt; part of the assessment but for ones who eager to prettify the result with the CSS. If you follow all the requirements related to page layouts, then you can add the &lt;a target=&quot;_blank&quot; href=&quot;https://stepik.org/media/attachments/lesson/339506/base.css&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;base.css&lt;/a&gt; file in your project.&lt;/p&gt;&#10;&#10;&lt;p&gt;Create the path &lt;em&gt;static/css&lt;/em&gt; in the root of your project and put the &lt;em&gt;base.css&lt;/em&gt; file there. Then paste at the top of each template you've created:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-django&quot;&gt;{% load static %}&#10;&amp;lt;link rel=&quot;stylesheet&quot; target=&quot;_blank&quot; href=&quot;{% static 'css/base.css' %}&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Tweak your settings a little bit:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;DEBUG = True&#10; &#10;STATIC_URL = &quot;/static/&quot;&#10;STATICFILES_DIRS = [os.path.join(BASE_DIR, &quot;static&quot;)]&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;And add an URL pattern to match static content:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from django.conf import settings&#10;from django.conf.urls.static import static&#10;  &#10;urlpatterns += static(settings.STATIC_URL)&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Launch your application again, and look at the result!&lt;/p&gt;&#10;&#10;&lt;p&gt;You can also play around with the content of the &lt;em&gt;static/css/base.css&lt;/em&gt; file and see what you get else.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/102/stages/565/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="9415" />
                      <option name="index" value="5" />
                      <option name="name" value="Search news" />
                      <option name="record" value="-1" />
                      <option name="status" value="Failed" />
                      <option name="files">
                        <map>
                          <entry key="hypernews/news/apps.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/apps.py" />
                                <option name="text" value="from django.apps import AppConfig&#10;&#10;&#10;class NewsConfig(AppConfig):&#10;    name = 'news'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/admin.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/admin.py" />
                                <option name="text" value="from django.contrib import admin&#10;&#10;# Register your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/tests.py" />
                                <option name="text" value="from django.test import TestCase&#10;&#10;# Create your tests here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/views.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/news/views.py" />
                                <option name="text" value="from django.shortcuts import render&#10;&#10;# Create your views here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/models.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/models.py" />
                                <option name="text" value="from django.db import models&#10;&#10;# Create your models here.&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/migrations/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/migrations/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/urls.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/hypernews/urls.py" />
                                <option name="text" value="&quot;&quot;&quot;hypernews URL Configuration&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/2.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;]&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/wsgi.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/wsgi.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;WSGI config for hypernews project.&#10;&#10;It exposes the WSGI callable as a module-level variable named ``application``.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;from django.core.wsgi import get_wsgi_application&#10;&#10;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;&#10;application = get_wsgi_application()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/__init__.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/__init__.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/hypernews/settings.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/hypernews/settings.py" />
                                <option name="text" value="&quot;&quot;&quot;&#10;Django settings for hypernews project.&#10;&#10;Generated by 'django-admin startproject' using Django 2.2.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/2.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/2.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;&#10;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;NEWS_JSON_PATH = 'news.json'  # You can choose any path you want&#10;NEWS_JSON_PATH = os.environ.get('NEWS_JSON_PATH') or NEWS_JSON_PATH  # DO NOT MODIFY THIS LINE&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = '(-q5783z2mh-cd217skey@(+_np2&amp;j0=sl6suvo)ah2uwz@9ij'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'hypernews.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'hypernews.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/2.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_L10N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/2.2/howto/static-files/&#10;&#10;STATIC_URL = '/static/'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/manage.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/manage.py" />
                                <option name="text" value="#!/usr/bin/env python&#10;&quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot;&#10;import os&#10;import sys&#10;&#10;&#10;def main():&#10;    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')&#10;    try:&#10;        from django.core.management import execute_from_command_line&#10;    except ImportError as exc:&#10;        raise ImportError(&#10;            &quot;Couldn't import Django. Are you sure it's installed and &quot;&#10;            &quot;available on your PYTHONPATH environment variable? Did you &quot;&#10;            &quot;forget to activate a virtual environment?&quot;&#10;        ) from exc&#10;    execute_from_command_line(sys.argv)&#10;&#10;&#10;if __name__ == '__main__':&#10;    main()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="base.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="base.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;import copy&#10;import http.cookiejar&#10;import json&#10;import os&#10;import re&#10;import urllib&#10;from datetime import datetime&#10;&#10;from hstest.django_test import DjangoTest&#10;from hstest.check_result import CheckResult&#10;&#10;&#10;class HyperNewsTest(DjangoTest):&#10;    COMMON_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;'''&#10;    CSRF_PATTERN = b'&lt;input[^&gt;]+name=&quot;csrfmiddlewaretoken&quot; ' \&#10;                   b'value=&quot;(?P&lt;csrf&gt;\w+)&quot;[^&gt;]*&gt;'&#10;    GROUPS_FIRST_PATTERN = '&lt;h4&gt;.*?&lt;/h4&gt;.*?&lt;ul&gt;.+?&lt;/ul&gt;'&#10;    GROUPS_SECOND_PATTERN = (&#10;        '''&lt;a[^&gt;]+href=['&quot;]([a-zA-Z\d/_]+)['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    )&#10;    H2_PATTERN = '&lt;h2&gt;(.+?)&lt;/h2&gt;'&#10;    H4_PATTERN = '&lt;h4&gt;(.+?)&lt;/h4&gt;'&#10;    PARAGRAPH_PATTERN = '&lt;p&gt;(.+?)&lt;/p&gt;'&#10;    TEXT_LINK_PATTERN = '''&lt;a[^&gt;]+href=['&quot;][a-zA-Z\d/_]+['&quot;][^&gt;]*&gt;(.+?)&lt;/a&gt;'''&#10;    cookie_jar = http.cookiejar.CookieJar()&#10;&#10;    def __init__(self, *args, **kwargs):&#10;        current_dir = os.path.dirname(os.path.abspath(__file__))&#10;        self.news_file_name = 'news.json'&#10;        os.environ['NEWS_JSON_PATH'] = os.path.join(current_dir,&#10;                                                    self.news_file_name)&#10;        super().__init__(*args, **kwargs)&#10;&#10;    def __stripped_list(self, list):&#10;        return [item.strip() for item in list]&#10;&#10;    def __setup(self):&#10;        self.news_data = [{&#10;            'created': '2020-02-09 14:15:10',&#10;            'text': 'Text of the news 1',&#10;            'title': 'News 1',&#10;            'link': 1&#10;        }, {&#10;            'created': '2020-02-10 14:15:10',&#10;            'text': 'Text of the news 2',&#10;            'title': 'News 2',&#10;            'link': 2&#10;        }, {&#10;            'created': '2020-02-09 16:15:10',&#10;            'text': 'Text of the news 3',&#10;            'title': 'News 3',&#10;            'link': 3&#10;        }]&#10;        with open(self.news_file_name, 'w') as f:&#10;            json.dump(self.news_data, f)&#10;&#10;    def check_coming_soon_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        coming_soon_text = 'Coming soon'&#10;&#10;        # response.url for the backward compatibility&#10;        if (coming_soon_text not in page&#10;                and response.url != f'http://localhost:{self.port}/news/'):&#10;            return CheckResult.false(&#10;                '&quot;Coming soon&quot; page should contain &quot;Coming soon&quot; text'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_coming_soon_page_redirect(self) -&gt; CheckResult:&#10;        self.__setup()&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            response = opener.open(f'http://localhost:{self.port}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the &quot;Coming soon&quot; page.')&#10;&#10;        if response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                f'&quot;Coming soon&quot; page should redirects '&#10;                f'to the http://localhost:{self.port}/news/'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_header(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h2_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        h2_headers = self.__stripped_list(h2_headers)&#10;        main_header = 'Hyper news'&#10;&#10;        if main_header not in h2_headers:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h2&gt; element with text &quot;Hyper news&quot;'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;        created = testing_news['created']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        page_headers = re.findall(self.H2_PATTERN, page, re.S)&#10;        page_headers = self.__stripped_list(page_headers)&#10;        page_paragraphs = re.findall(self.PARAGRAPH_PATTERN, page, re.S)&#10;        page_paragraphs = self.__stripped_list(page_paragraphs)&#10;        if testing_news['title'] not in page_headers:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;h2&gt; element with the data '&#10;                'of the title field from json file.'&#10;            )&#10;&#10;        if testing_news['text'] not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the text field from json file.'&#10;            )&#10;&#10;        if created not in page_paragraphs:&#10;            return CheckResult.false(&#10;                'News page should contain &lt;p&gt; element with the data '&#10;                'of the created field from json file '&#10;                'in the format: &quot;%Y-%m-%d %H:%M:%S&quot;.'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_create_link(self):&#10;        self.__setup()&#10;        create_link = '/news/create/'&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if create_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Main page should contain &lt;a&gt; element with href {create_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page(self) -&gt; CheckResult:&#10;        self.__setup()&#10;        created_set = set()&#10;        news_data = copy.deepcopy(self.news_data)&#10;        for news in news_data:&#10;            created_dt = datetime.strptime(news['created'],&#10;                                           '%Y-%m-%d %H:%M:%S') \&#10;                                 .date()&#10;            created_set.add(created_dt)&#10;&#10;        created_list = [x for x in created_set]&#10;        created_list.sort(reverse=True)&#10;        created_list_str = [x.strftime('%Y-%m-%d') for x in created_list]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;        filtered_h4 = list(filter(lambda x: x in created_list_str, h4_headers))&#10;&#10;        if filtered_h4 != created_list_str:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;h4&gt; elements grouped by '&#10;                'date created and first should be fresh news.'&#10;            )&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date'] = created_date&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;            news['link'] = '/news/{}/'.format(news['link'])&#10;&#10;        file_data = sorted(news_data, key=lambda x: x['title'])&#10;        file_data = sorted(&#10;            file_data, key=lambda x: x['created_date'], reverse=True)&#10;&#10;        for news in file_data:&#10;            news.pop('created_date')&#10;            news.pop('created')&#10;            news.pop('text')&#10;&#10;        groups = re.findall(self.GROUPS_FIRST_PATTERN, page, re.S)&#10;        news_list = [&#10;            sorted(re.findall(self.GROUPS_SECOND_PATTERN, group, re.S),&#10;                   key=lambda news: news[1])&#10;            for group in groups&#10;        ]&#10;        response_data = []&#10;        for news_l, h4 in zip(news_list, filtered_h4):&#10;            for news in news_l:&#10;                response_data.append({&#10;                    'created_date_str': h4,&#10;                    'link': news[0],&#10;                    'title': news[1].strip()&#10;                })&#10;&#10;        if response_data != file_data:&#10;            return CheckResult.false(&#10;                'Main page should contain &lt;a&gt; elements with href to news pages.'&#10;            )&#10;&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_creating_news(self):&#10;        self.__setup()&#10;        old_news_titles = [news['title'] for news in self.news_data]&#10;&#10;        new_news = {&#10;            'title': 'News 4',&#10;            'text': 'Text of the news 4',&#10;        }&#10;&#10;        titles = (*old_news_titles, new_news['title'])&#10;&#10;        opener = urllib.request.build_opener(&#10;            urllib.request.HTTPCookieProcessor(self.cookie_jar))&#10;        try:&#10;            create_page_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false('Cannot connect to the create page.')&#10;&#10;        create_page = create_page_response.read()&#10;&#10;        csrf_options = re.findall(self.CSRF_PATTERN, create_page)&#10;        if not csrf_options:&#10;            return CheckResult.false(&#10;                'Missing csrf_token in the create page form')&#10;&#10;        try:&#10;            create_response = opener.open(&#10;                f'http://localhost:{self.port}/news/create/',&#10;                data=urllib.parse.urlencode({&#10;                        'title': new_news['title'],&#10;                    'text': new_news['text'],&#10;                    'csrfmiddlewaretoken': csrf_options[0],&#10;                }).encode()&#10;            )&#10;        except urllib.error.URLError as err:&#10;            if 'Forbidden' not in err.reason:&#10;                return CheckResult.false(&#10;                    f'Wrong response for forbidden requests: {err.reason}')&#10;&#10;        if create_response.url != f'http://localhost:{self.port}/news/':&#10;            return CheckResult.false(&#10;                'After creating news handler should redirects to the /news/ '&#10;                'page')&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the main page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        for title in titles:&#10;            if title not in links_from_page:&#10;                return CheckResult.false(&#10;                    f'After creating news main page can\'t find {title}')&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_create_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        try:&#10;            page = self.read_page(&#10;                f'http://localhost:{self.port}/news/create/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the create page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'Create page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_news_page_main_link(self):&#10;        self.__setup()&#10;        main_link = '/news/'&#10;&#10;        testing_news = self.news_data[0]&#10;        link = testing_news['link']&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/{link}/')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the news page.'&#10;            )&#10;&#10;        links_from_page = re.findall(self.COMMON_LINK_PATTERN, page, re.S)&#10;        links_from_page = self.__stripped_list(links_from_page)&#10;&#10;        if main_link not in links_from_page:&#10;            return CheckResult.false(&#10;                f'News page should contain &lt;a&gt; element with href {main_link}'&#10;            )&#10;&#10;        return CheckResult.true()&#10;&#10;    def check_main_page_search(self):&#10;        self.__setup()&#10;        q = '2'&#10;        news_data = copy.deepcopy(self.news_data)&#10;&#10;        for news in news_data:&#10;            created_date = datetime.strptime(news['created'],&#10;                                             '%Y-%m-%d %H:%M:%S') \&#10;                .date()&#10;            news['created_date_str'] = created_date.strftime('%Y-%m-%d')&#10;&#10;        all_headers = set((x['created_date_str'] for x in news_data))&#10;        visible_headers = set((x['created_date_str'] for x in news_data&#10;                               if q in x['title']))&#10;        invisible_headers = all_headers - visible_headers&#10;        visible_titles = [x['title'] for x in news_data&#10;                          if q in x['title']]&#10;        invisible_titles = [x['title'] for x in news_data&#10;                            if q not in x['title']]&#10;&#10;        try:&#10;            page = self.read_page(f'http://localhost:{self.port}/news/?q={q}')&#10;        except urllib.error.URLError:&#10;            return CheckResult.false(&#10;                'Cannot connect to the search page.'&#10;            )&#10;&#10;        h4_headers = re.findall(self.H4_PATTERN, page, re.S)&#10;        h4_headers = self.__stripped_list(h4_headers)&#10;&#10;        for header in visible_headers:&#10;            if header not in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should contain headers with found news'&#10;                )&#10;&#10;        for header in invisible_headers:&#10;            if header in h4_headers:&#10;                return CheckResult.false(&#10;                    f'Search page should not contain headers with unfound news'&#10;                )&#10;&#10;        titles = re.findall(self.TEXT_LINK_PATTERN, page, re.S)&#10;        titles = self.__stripped_list(titles)&#10;&#10;        for title in visible_titles:&#10;            if title not in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain unfound news'&#10;                )&#10;&#10;        for title in invisible_titles:&#10;            if title in titles:&#10;                return CheckResult.false(&#10;                    f'Search page should contain found news'&#10;                )&#10;&#10;        return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_case.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_case.py" />
                                <option name="text" value="from typing import List, Dict, Any, Tuple, Callable&#10;&#10;&#10;class TestCase:&#10;&#10;    def __init__(self, *, stdin='', args=None,&#10;                 attach=None, files=None, copy_to_attach=False,&#10;                 attach_callback=None):&#10;        self.input: str = stdin&#10;        self.args: List[str] = [] if args is None else args&#10;        self.attach: Any = attach&#10;        self.attach_callback: Callable = attach_callback&#10;        self.files: Dict[str, str] = {} if files is None else files&#10;        if copy_to_attach:&#10;            self.attach = stdin&#10;&#10;    @staticmethod&#10;    def from_stepik(stepik_tests: List[Tuple[str, Any]]) -&gt; List['TestCase']:&#10;        hs_tests = []&#10;        for test in stepik_tests:&#10;            hs_test = TestCase()&#10;            if type(test) in (list, tuple):&#10;                hs_test.input = test[0]&#10;                hs_test.attach = test[1]&#10;            elif type(test) is str:&#10;                hs_test.input = test&#10;            else:&#10;                raise ValueError(&quot;Bad test: &quot; + str(test))&#10;            hs_tests += [hs_test]&#10;        return hs_tests&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/exceptions.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/exceptions.py" />
                                <option name="text" value="&#10;class BadSolutionException(Exception):&#10;    def __init__(self, message):&#10;        self.message = message&#10;&#10;&#10;class SyntaxException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class ExitException(BadSolutionException):&#10;    def __init__(self, message):&#10;        super().__init__(message)&#10;&#10;&#10;class UnexpectedErrorException(Exception):&#10;    pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/stage_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/stage_test.py" />
                                <option name="text" value="import sys&#10;import runpy&#10;import os&#10;import io&#10;import importlib&#10;import signal&#10;import builtins&#10;import traceback&#10;from typing import List, Any, Dict&#10;from hstest.test_helper import *&#10;from hstest.test_case import TestCase&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import *&#10;&#10;&#10;class StageTest:&#10;&#10;    real_stdin = None&#10;    real_print = None&#10;    real_input = None&#10;    user_output: io.StringIO = None&#10;&#10;    @staticmethod&#10;    def remove_kill_methods():&#10;        os.kill = lambda *x, **y: exit(0)&#10;        os._exit = lambda *x, **y: exit(0)&#10;        os.killpg = lambda *x, **y: exit(0)&#10;        signal.pthread_kill = lambda *x, **y: exit(0)&#10;        signal.siginterrupt = lambda *x, **y: exit(0)&#10;&#10;    @staticmethod&#10;    def set_input(user_input: str):&#10;        sys.stdin = io.StringIO(user_input)&#10;&#10;    @staticmethod&#10;    def add_input(user_input: str):&#10;        sys.stdin: io.StringIO&#10;        curr_position = sys.stdin.seek(0, io.SEEK_CUR)&#10;        sys.stdin.seek(0)&#10;        sys.stdin = io.StringIO(sys.stdin.read() + user_input)&#10;        sys.stdin.seek(curr_position)&#10;&#10;    @staticmethod&#10;    def print(*args, **kwargs):&#10;        StageTest.real_print(*args, **kwargs)&#10;        StageTest.real_print(*args, **kwargs, file=StageTest.user_output)&#10;&#10;    @staticmethod&#10;    def input(arg=''):&#10;        StageTest.print(arg, end='')&#10;        user_input = StageTest.real_input()&#10;        # StageTest.print()&#10;        return user_input&#10;&#10;    @staticmethod&#10;    def replace_globals():&#10;        StageTest.real_stdin = sys.stdin&#10;        StageTest.real_print = builtins.print&#10;        StageTest.real_input = builtins.input&#10;        builtins.print = StageTest.print&#10;        builtins.input = StageTest.input&#10;&#10;    @staticmethod&#10;    def get_print_back():&#10;        builtins.print = StageTest.real_print&#10;        sys.stdin = StageTest.real_stdin&#10;&#10;    def __init__(self, module_to_test: str):&#10;        self.remove_kill_methods()&#10;        self.replace_globals()&#10;        self.module_to_test = module_to_test&#10;        self.this_test_file = __file__&#10;        self.file_to_test = module_to_test.replace('.', os.sep) + '.py'&#10;        self.full_file_to_test = ''&#10;        self.tests: List[TestCase] = []&#10;&#10;    def reset(self):&#10;        StageTest.user_output = io.StringIO()&#10;        top_module = self.module_to_test[:self.module_to_test.index('.')]&#10;        for name, module in list(sys.modules.items()):&#10;            if name.startswith(top_module):&#10;                importlib.reload(module)&#10;&#10;    @staticmethod&#10;    def create_files(files: Dict[str, str]):&#10;        for file, content in files.items():&#10;            with open(file, 'w') as f:&#10;                f.write(content)&#10;&#10;    @staticmethod&#10;    def delete_files(files: Dict[str, str]):&#10;        for file in files.keys():&#10;            if os.path.isfile(file):&#10;                os.remove(file)&#10;&#10;    def run(self):&#10;        runpy.run_module(&#10;            self.module_to_test,&#10;            run_name=&quot;__main__&quot;&#10;        )&#10;&#10;    def test(self, test_case: TestCase) -&gt; str:&#10;        self.reset()&#10;        try:&#10;            self.create_files(test_case.files)&#10;            sys.argv = [self.file_to_test] + test_case.args&#10;            self.set_input(test_case.input)&#10;            self.run()&#10;            self.delete_files(test_case.files)&#10;            return StageTest.user_output.getvalue()&#10;&#10;        except SyntaxError as e:&#10;&#10;            file = e.filename&#10;            file = file.replace(os.sep, '.')&#10;            file = file[file.index(self.module_to_test):-3]&#10;            file = file.replace('.', os.sep) + '.py'&#10;&#10;            output = f'File &quot;{file}&quot;, line {e.lineno}\n' \&#10;                     + e.text.strip()[: e.offset-1] + '\n' \&#10;                     'SyntaxError: invalid syntax'&#10;&#10;            # '`' * (e.offset - 2) + '^'&#10;&#10;            raise SyntaxException(output)&#10;&#10;        except (SystemExit, KeyboardInterrupt):&#10;            raise ExitException('Tried to exit.')&#10;&#10;    def generate(self) -&gt; List[TestCase]:&#10;        raise NotImplemented&#10;&#10;    def check(self, reply: str, attach: Any) -&gt; CheckResult:&#10;        raise NotImplemented&#10;&#10;    def after_all_tests(self):&#10;        pass&#10;&#10;    def get_stacktrace(self, hide_internals, skipped_traces=0):&#10;&#10;        if self.full_file_to_test != '':&#10;            common_prefix = os.path.commonpath([&#10;                self.full_file_to_test, self.this_test_file&#10;            ])&#10;        else:&#10;            common_prefix = ''&#10;&#10;        exc_type, exc_obj, exc_tb = sys.exc_info()&#10;&#10;        if hide_internals and skipped_traces != 0:&#10;            traceback_msg = 'Traceback (most recent call last):\n'&#10;        else:&#10;            traceback_msg = ''&#10;&#10;        for line in traceback.TracebackException(&#10;                type(exc_obj), exc_obj, exc_tb, limit=None).format(chain=None):&#10;            if not hide_internals:&#10;                traceback_msg += line&#10;            elif skipped_traces &gt;= 0:&#10;                skipped_traces -= 1&#10;            elif self.this_test_file not in line:&#10;                traceback_msg += line.replace(common_prefix + os.sep, '')&#10;&#10;        return traceback_msg&#10;&#10;    def run_tests(self):&#10;&#10;        test_number = 0&#10;        try:&#10;            for test in self.generate():&#10;                test_number += 1&#10;                reply = self.test(test)&#10;                result = self.check(reply, test.attach)&#10;                if not result.result:&#10;                    fail_msg = f'Wrong answer in test #{test_number}'&#10;                    self.get_print_back()&#10;                    failed(fail_msg + '\n\n' + result.feedback)&#10;                    break&#10;            passed()&#10;&#10;        except SyntaxException as ex:&#10;            self.get_print_back()&#10;            failed(ex.message)&#10;&#10;        except ExitException as ex:&#10;            error_msg = f'Error in test #{test_number}'&#10;            self.get_print_back()&#10;            failed(error_msg + '\n\n' + ex.message)&#10;&#10;        except Exception:&#10;&#10;            exc_type, exc_obj, exc_tb = sys.exc_info()&#10;            trace_frames = []&#10;&#10;            user_trace_started = False&#10;            skipped_traces = 0&#10;            while exc_tb is not None:&#10;                code = exc_tb.tb_frame.f_code&#10;                filename = code.co_filename&#10;&#10;                if filename.endswith(self.file_to_test) and not user_trace_started:&#10;                    user_trace_started = True&#10;                    self.full_file_to_test = exc_tb.tb_frame.f_code.co_filename&#10;&#10;                if user_trace_started:&#10;                    trace_frames += [exc_tb.tb_frame.f_code]&#10;                else:&#10;                    skipped_traces += 1&#10;&#10;                exc_tb = exc_tb.tb_next&#10;&#10;            if not trace_frames:&#10;                exception_msg = (&#10;                        f&quot;Fatal error in test #{test_number}, &quot; +&#10;                        &quot;please send the report to Hyperskill team.&quot;&#10;                )&#10;                stacktrace = self.get_stacktrace(hide_internals=False)&#10;&#10;            else:&#10;                exception_msg = f'Exception in test #{test_number}'&#10;                stacktrace = self.get_stacktrace(&#10;                    hide_internals=True,&#10;                    skipped_traces=skipped_traces&#10;                )&#10;&#10;            self.get_print_back()&#10;            failed(exception_msg + '\n\n' + stacktrace)&#10;        finally:&#10;            self.after_all_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/django_test.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/django_test.py" />
                                <option name="text" value="import os&#10;import shutil&#10;import signal&#10;import subprocess&#10;import sys&#10;from time import sleep&#10;from urllib.error import URLError, HTTPError&#10;from urllib.request import urlopen&#10;from hstest.stage_test import StageTest&#10;from hstest.check_result import CheckResult&#10;from hstest.exceptions import UnexpectedErrorException&#10;&#10;&#10;EMPTY_DATABASE = 'empty.sqlite3'&#10;TEST_DATABASE = 'db.test.sqlite3'&#10;&#10;&#10;class DjangoTest(StageTest):&#10;    _kill = os.kill&#10;    port = '0'&#10;    tryout_ports = ['8000', '8001', '8002', '8003', '8004']&#10;    process = None&#10;&#10;    def run(self):&#10;        if self.process is None:&#10;            self.__find_free_port()&#10;            self.__prepare_database()&#10;            self.process = subprocess.Popen([&#10;                sys.executable, self.file_to_test,&#10;                'runserver', self.port, '--noreload',&#10;            ])&#10;&#10;    def __prepare_database(self):&#10;        if os.path.exists(EMPTY_DATABASE):&#10;            shutil.copyfile(EMPTY_DATABASE, TEST_DATABASE)&#10;            os.environ['HYPERSKILL_TEST_DATABASE'] = TEST_DATABASE&#10;            migrate = subprocess.Popen(&#10;                [sys.executable, self.file_to_test, 'migrate'],&#10;                stderr=subprocess.PIPE&#10;            )&#10;            exit_code = migrate.wait()&#10;            if exit_code != 0:&#10;                raise UnexpectedErrorException(migrate.stderr.read().decode())&#10;&#10;    def check_server(self):&#10;        if self.port == '0':&#10;            return CheckResult.false(&#10;                f'Please free one of the ports: {&quot;, &quot;.join(self.tryout_ports)}'&#10;            )&#10;&#10;        for _ in range(15):&#10;            try:&#10;                urlopen(f'http://localhost:{self.port}/not-existing-link-by-default')&#10;                return CheckResult.true()&#10;            except URLError as err:&#10;                if isinstance(err, HTTPError):&#10;                    return CheckResult.true()&#10;                sleep(1)&#10;        else:&#10;            return CheckResult.false(&#10;                'Cannot start the ./manage.py runserver for 15 seconds'&#10;            )&#10;&#10;    def __find_free_port(self):&#10;        for port in self.tryout_ports:&#10;            try:&#10;                urlopen(f'http://localhost:{port}')&#10;            except URLError as err:&#10;                if isinstance(err.reason, ConnectionRefusedError):&#10;                    self.port = port&#10;                    break&#10;            except ConnectionResetError:&#10;                pass&#10;&#10;    def read_page(self, link: str) -&gt; str:&#10;        return urlopen(link).read().decode().replace('\u00a0', ' ')&#10;&#10;    def after_all_tests(self):&#10;        if self.process is not None:&#10;            try:&#10;                self._kill(self.process.pid, signal.SIGINT)&#10;            except ProcessLookupError:&#10;                pass&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/test_helper.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/test_helper.py" />
                                <option name="text" value="&#10;def set_congratulation_message(message):&#10;    &quot;&quot;&quot; Overrides default 'Congratulations!' message &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin CONGRATS_MESSAGE &quot; + message)&#10;&#10;&#10;def failed(message: str):&#10;    &quot;&quot;&quot; Reports failure &quot;&quot;&quot;&#10;    lines = message.splitlines()&#10;    print(&quot;\n#educational_plugin FAILED + &quot; + lines[0])&#10;    for line in lines[1:]:&#10;        print(&quot;#educational_plugin &quot; + line)&#10;&#10;&#10;def passed():&#10;    &quot;&quot;&quot; Reports success &quot;&quot;&quot;&#10;    print(&quot;#educational_plugin test OK&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hstest/check_result.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hstest/check_result.py" />
                                <option name="text" value="class CheckResult:&#10;&#10;    def __init__(self, result: bool, feedback: str):&#10;        self.result = result&#10;        self.feedback = feedback&#10;&#10;    @staticmethod&#10;    def true():&#10;        return CheckResult(True, '')&#10;&#10;    @staticmethod&#10;    def false(feedback: str = ''):&#10;        return CheckResult(False, feedback)&#10;&#10;&#10;def wrong(feedback: str = '') -&gt; CheckResult:&#10;    return CheckResult.false(feedback)&#10;&#10;&#10;def accept():&#10;    return CheckResult.true()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tests.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tests.py" />
                                <option name="text" value="# -*- coding: utf-8 -*-&#10;from hstest.test_case import TestCase&#10;&#10;from base import HyperNewsTest&#10;&#10;&#10;class HyperNewsTestRunner(HyperNewsTest):&#10;    def generate(self):&#10;        return [&#10;            # 1 task&#10;            TestCase(attach=self.check_server),&#10;            TestCase(attach=self.check_coming_soon_page),&#10;            # 2 task&#10;            TestCase(attach=self.check_news_page),&#10;            TestCase(attach=self.check_news_page_main_link),&#10;            # 3 task&#10;            TestCase(attach=self.check_main_header),&#10;            TestCase(attach=self.check_main_page),&#10;            TestCase(attach=self.check_main_page_create_link),&#10;            # 4 task&#10;            TestCase(attach=self.check_creating_news),&#10;            TestCase(attach=self.check_create_page_main_link),&#10;            # 5 task&#10;            TestCase(attach=self.check_main_page_search),&#10;            TestCase(attach=self.check_coming_soon_page_redirect),&#10;        ]&#10;&#10;    def check(self, reply, attach):&#10;        return attach()&#10;&#10;&#10;if __name__ == '__main__':&#10;    HyperNewsTestRunner('hypernews.manage').run_tests()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/templates/news/news.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/templates/news/news.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;News&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h2&gt;{{ title }}&lt;/h2&gt;&#10;    &lt;p&gt;{{ created }}&lt;/p&gt;&#10;    &lt;p&gt;{{ text }}&lt;/p&gt;&#10;    &lt;a target=&quot;_blank&quot; href=&quot;/news/&quot;&gt;news&lt;/a&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/templates/news/main_news.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hypernews/news/templates/news/main_news.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;News List&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h2&gt;Hyper news&lt;/h2&gt;&#10;    {% for obj in objects %}&#10;    &lt;h4&gt;{{ obj.date }}&lt;/h4&gt;&#10;&#10;    &lt;ul&gt;&#10;        {% for item in obj.items %}&#10;        &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;/news/{{item.link}}/&quot;&gt;{{ item.title}}&lt;/a&gt;&lt;/li&gt;&#10;        {% endfor %}&#10;    &lt;/ul&gt;&#10;    {% endfor %}&#10;    &lt;a target=&quot;_blank&quot; href=&quot;/news/create/&quot;&gt;Create News&lt;/a&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="news.json">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="news.json" />
                                <option name="text" value="[{&quot;created&quot;: &quot;2020-02-09 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 1&quot;, &quot;title&quot;: &quot;News 1&quot;, &quot;link&quot;: 1}, {&quot;created&quot;: &quot;2020-02-10 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 2&quot;, &quot;title&quot;: &quot;News 2&quot;, &quot;link&quot;: 2}, {&quot;created&quot;: &quot;2020-02-09 16:15:10&quot;, &quot;text&quot;: &quot;Text of the news 3&quot;, &quot;title&quot;: &quot;News 3&quot;, &quot;link&quot;: 3}]" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/news.json">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/news.json" />
                                <option name="text" value="[{&quot;created&quot;: &quot;2020-02-09 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 1&quot;, &quot;title&quot;: &quot;News 1&quot;, &quot;link&quot;: 1}, {&quot;created&quot;: &quot;2020-02-10 14:15:10&quot;, &quot;text&quot;: &quot;Text of the news 2&quot;, &quot;title&quot;: &quot;News 2&quot;, &quot;link&quot;: 2}, {&quot;created&quot;: &quot;2020-02-09 16:15:10&quot;, &quot;text&quot;: &quot;Text of the news 3&quot;, &quot;title&quot;: &quot;News 3&quot;, &quot;link&quot;: 3}, {&quot;created&quot;: &quot;2020-08-31 00:12:11&quot;, &quot;text&quot;: &quot;anjing&quot;, &quot;title&quot;: &quot;anjing&quot;, &quot;link&quot;: 10}]" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="hypernews/news/templates/news/create_news.html">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="hypernews/news/templates/news/create_news.html" />
                                <option name="text" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Create News&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;form method=&quot;post&quot; action=&quot;/news/create/&quot;&gt;{% csrf_token %}&#10;        &lt;label for=&quot;title&quot; &gt;Title&lt;/label&gt;&#10;        &lt;input id=&quot;title&quot; name=&quot;title&quot; type=&quot;text&quot; required&gt;&#10;        &lt;label for=&quot;textnews&quot; &gt;Text&lt;/label&gt;&#10;        &lt;input id=&quot;textnews&quot; name=&quot;text&quot; type=&quot;text&quot; required&gt;&#10;        &lt;button type=&quot;submit&quot;&gt;Post News&lt;/button&gt;&#10;    &lt;/form&gt;&#10;    &lt;a target=&quot;_blank&quot; href=&quot;/news/&quot;&gt;News Home&lt;/a&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>